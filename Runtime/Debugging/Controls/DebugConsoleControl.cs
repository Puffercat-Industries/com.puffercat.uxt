//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Packages/com.puffercat.uxt/Runtime/Debugging/Controls/DebugConsoleControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DebugConsoleControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DebugConsoleControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DebugConsoleControl"",
    ""maps"": [
        {
            ""name"": ""Debug Console"",
            ""id"": ""1344b47a-4ad3-47c3-8650-23ffaeb28c5e"",
            ""actions"": [
                {
                    ""name"": ""Toggle"",
                    ""type"": ""Button"",
                    ""id"": ""1077d533-df1c-4bb7-8618-942ff7c3cf75"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""64da0c02-9cf7-4957-ba74-465b43685ca4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5bc03bf5-e07a-4867-b829-8cc3a987d1ed"",
                    ""path"": ""<Keyboard>/backquote"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02e86f12-7c8f-4ce8-953c-85529be31b96"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Debug Console
        m_DebugConsole = asset.FindActionMap("Debug Console", throwIfNotFound: true);
        m_DebugConsole_Toggle = m_DebugConsole.FindAction("Toggle", throwIfNotFound: true);
        m_DebugConsole_Submit = m_DebugConsole.FindAction("Submit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Debug Console
    private readonly InputActionMap m_DebugConsole;
    private List<IDebugConsoleActions> m_DebugConsoleActionsCallbackInterfaces = new List<IDebugConsoleActions>();
    private readonly InputAction m_DebugConsole_Toggle;
    private readonly InputAction m_DebugConsole_Submit;
    public struct DebugConsoleActions
    {
        private @DebugConsoleControl m_Wrapper;
        public DebugConsoleActions(@DebugConsoleControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Toggle => m_Wrapper.m_DebugConsole_Toggle;
        public InputAction @Submit => m_Wrapper.m_DebugConsole_Submit;
        public InputActionMap Get() { return m_Wrapper.m_DebugConsole; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugConsoleActions set) { return set.Get(); }
        public void AddCallbacks(IDebugConsoleActions instance)
        {
            if (instance == null || m_Wrapper.m_DebugConsoleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DebugConsoleActionsCallbackInterfaces.Add(instance);
            @Toggle.started += instance.OnToggle;
            @Toggle.performed += instance.OnToggle;
            @Toggle.canceled += instance.OnToggle;
            @Submit.started += instance.OnSubmit;
            @Submit.performed += instance.OnSubmit;
            @Submit.canceled += instance.OnSubmit;
        }

        private void UnregisterCallbacks(IDebugConsoleActions instance)
        {
            @Toggle.started -= instance.OnToggle;
            @Toggle.performed -= instance.OnToggle;
            @Toggle.canceled -= instance.OnToggle;
            @Submit.started -= instance.OnSubmit;
            @Submit.performed -= instance.OnSubmit;
            @Submit.canceled -= instance.OnSubmit;
        }

        public void RemoveCallbacks(IDebugConsoleActions instance)
        {
            if (m_Wrapper.m_DebugConsoleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDebugConsoleActions instance)
        {
            foreach (var item in m_Wrapper.m_DebugConsoleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DebugConsoleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DebugConsoleActions @DebugConsole => new DebugConsoleActions(this);
    public interface IDebugConsoleActions
    {
        void OnToggle(InputAction.CallbackContext context);
        void OnSubmit(InputAction.CallbackContext context);
    }
}
